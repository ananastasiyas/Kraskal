using System.Collections.Generic;
using System;
using System.Linq;

namespace Краскал_2._0
{
    class Rebro
    {
        public int Start;
        public int End;
        public int Weight;
        public int Number;
        public Rebro(int start, int end, int weight, int number)
        {
            Start = start;
            End = end;
            Weight = weight;
            Number = number;
        }
    }

    internal class Program
    {
        static List<Rebro> edges = new List<Rebro>()
        {   new Rebro(2, 3, 1, 1), new  Rebro(1,3,13,2),
            new Rebro(3,4,7,3), new Rebro(3,7,4,4), new Rebro(1,4,7,5), new Rebro(1,6,2,6),
            new Rebro(0,1,3,7), new Rebro(0,6,4,8), new Rebro(4,6,9,9), new Rebro(5,6,5,10),
            new Rebro(3,5,6,11), new Rebro(5,7,11,12),
        };

        static List<List<Rebro>> mst = new List<List<Rebro>>(); 

        static void Main(string[] args)
        {
            int sum = 0;
            edges = edges.OrderBy(e => e.Weight).ToList(); 

            List<Rebro> list = new List<Rebro>(); 
            list.Add(new Rebro(edges[0].Start, edges[0].End, edges[0].Weight, edges[0].Number)); 
            mst.Add(list);

            for (int i = 1; i < edges.Count; i++) 
            {
                int x = edges[i].Start;
                int y = edges[i].End;
                int fx = Find(x); 
                int fy = Find(y); 
                if ((fx != -1) && (fy != -1) && (fx != fy)) { MakeSet(i); Union(fx, mst.Count - 1, fy); }
                else if ((fx == -1) && (fy == -1)) MakeSet(i);
                else if ((fx == -1) || (fy == -1)) mst[Math.Max(fx, fy)].Add(new Rebro(x, y, edges[i].Weight, edges[i].Number));
            }
            for (int i = 0; i < mst[0].Count; i++)
            {
                sum = sum + mst[0][i].Weight;
                Console.Write("{0} ", mst[0][i].Number);
            }
            Console.WriteLine();
            Console.WriteLine("Вес дерева: {0}", sum);
            Console.ReadKey();
        }

        static void MakeSet(int i) 
        {
            List<Rebro> list = new List<Rebro>();
            list.Add(new Rebro(edges[i].Start, edges[i].End, edges[i].Weight, edges[i].Number));
            mst.Add(list);
        }

        static void Union(int x, int t, int y) 
        {
            mst[x].AddRange(mst[t]); 
            mst[x].AddRange(mst[y]);
            mst.RemoveAt(t); 
            mst.RemoveAt(y);
        }

        static int Find(int x) 
        {
            for (int i = 0; i < mst.Count; i++)
            {
                for (int j = 0; j < mst[i].Count; j++)
                {
                    if ((mst[i][j].Start == x) || (mst[i][j].End == x)) return i;
                }
            }
            return -1;
        }
    }
}

